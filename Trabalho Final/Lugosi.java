/* Generated By:JavaCC: Do not edit this line. Lugosi.java */
import java.io.*;
import java.util.ArrayList;

import ast.*;

public class Lugosi implements LugosiConstants {

  public static void main(String args[]) throws ParseException, IOException {
    if (args.length == 0) {
      System.out.println("Uso: java Lugosi <arquivo.lugosi>");
      return;
    }

    FileInputStream fs = new FileInputStream(new File(args[0]));
    Lugosi parser = new Lugosi(fs);

    try {
      Prog arvore = parser.Lugosi();
      System.out.println("An\u00c3\u00a1lise sint\u00c3\u00a1tica conclu\u00c3\u00adda com sucesso!");

      // Gerar código a partir da árvore sintática
      geraCodigo(arvore, args[0]);
    } catch (ParseException e) {
      System.err.println("Erro de an\u00c3\u00a1lise sint\u00c3\u00a1tica: " + e.getMessage());
    }
  }

  public static void geraCodigo(Prog prog, String arquivo) {
    try {
      String nomeArquivoSaida = arquivo.substring(0, arquivo.lastIndexOf('.')) + ".java";
      PrintWriter writer = new PrintWriter(nomeArquivoSaida);

      // Gerar código Java a partir da árvore sintática
      writer.println("// C\u00c3\u00b3digo gerado pelo compilador Lugosi");
      writer.println("public class " + nomeArquivoSaida.substring(nomeArquivoSaida.lastIndexOf(File.separator) + 1, nomeArquivoSaida.lastIndexOf('.')) + " {");

      // Gerar código para o main
      writer.println("  public static void main(String[] args) {");

      // Declarar variáveis do main
      for (VarDecl var : prog.main.vars) {
        if (var.type.equals("float")) {
          writer.println("    double " + var.var + " = 0.0;");
        } else if (var.type.equals("bool")) {
          writer.println("    boolean " + var.var + " = false;");
        }
      }

      // Gerar código para os comandos do main
      for (Comando cmd : prog.main.coms) {
        geraCodigoComando(cmd, writer, "    ");
      }

      writer.println("  }");

      // Gerar código para as funções
      if (prog.fun != null) {
        for (Fun funcao : prog.fun) {
          String tipoRetorno = funcao.retorno.equals("float") ? "double" :
                              funcao.retorno.equals("bool") ? "boolean" : "void";

          writer.print("  public static " + tipoRetorno + " " + funcao.nome + "(");

          // Parâmetros da função
          for (int i = 0; i < funcao.params.size(); i++) {
            ParamFormalFun param = funcao.params.get(i);
            String tipoParam = param.type.equals("float") ? "double" : "boolean";
            writer.print(tipoParam + " " + param.var);
            if (i < funcao.params.size() - 1) {
              writer.print(", ");
            }
          }
          writer.println(") {");

          // Declarar variáveis locais da função
          for (VarDecl var : funcao.vars) {
            if (var.type.equals("float")) {
              writer.println("    double " + var.var + " = 0.0;");
            } else if (var.type.equals("bool")) {
              writer.println("    boolean " + var.var + " = false;");
            }
          }

          // Gerar código para os comandos da função
          for (Comando cmd : funcao.body) {
            geraCodigoComando(cmd, writer, "    ");
          }

          writer.println("  }");
        }
      }

      writer.println("}");
      writer.close();

      System.out.println("C\u00c3\u00b3digo gerado com sucesso: " + nomeArquivoSaida);
    } catch (IOException e) {
      System.err.println("Erro ao gerar c\u00c3\u00b3digo: " + e.getMessage());
    }
  }

  private static void geraCodigoComando(Comando cmd, PrintWriter writer, String indent) {
    if (cmd instanceof CAtribuicao) {
      CAtribuicao atrib = (CAtribuicao) cmd;
      writer.println(indent + atrib.var + " = " + geraCodigoExp(atrib.exp) + ";");
    } else if (cmd instanceof CChamadaFun) {
      CChamadaFun chamada = (CChamadaFun) cmd;
      writer.print(indent + chamada.fun + "(");
      for (int i = 0; i < chamada.args.size(); i++) {
        writer.print(geraCodigoExp(chamada.args.get(i)));
        if (i < chamada.args.size() - 1) {
          writer.print(", ");
        }
      }
      writer.println(");");
    } else if (cmd instanceof CIf) {
      CIf cif = (CIf) cmd;
      writer.println(indent + "if (" + geraCodigoExp(cif.exp) + ") {");
      for (Comando c : cif.bloco) {
        geraCodigoComando(c, writer, indent + "  ");
      }
      writer.println(indent + "}");
    } else if (cmd instanceof CWhile) {
      CWhile cwhile = (CWhile) cmd;
      writer.println(indent + "while (" + geraCodigoExp(cwhile.exp) + ") {");
      for (Comando c : cwhile.bloco) {
        geraCodigoComando(c, writer, indent + "  ");
      }
      writer.println(indent + "}");
    } else if (cmd instanceof CPrint) {
      CPrint print = (CPrint) cmd;
      writer.println(indent + "System.out.println(" + geraCodigoExp(print.exp) + ");");
    } else if (cmd instanceof CReadInput) {
      CReadInput read = (CReadInput) cmd;
      writer.println(indent + "java.util.Scanner scanner = new java.util.Scanner(System.in);");
      writer.println(indent + read.var + " = scanner.nextDouble();");
    } else if (cmd instanceof CReturn) {
      CReturn ret = (CReturn) cmd;
      writer.println(indent + "return " + geraCodigoExp(ret.exp) + ";");
    }
  }

  private static String geraCodigoExp(Exp exp) {
    if (exp instanceof EVar) {
      return ((EVar) exp).var;
    } else if (exp instanceof EFloat) {
      return String.valueOf(((EFloat) exp).value);
    } else if (exp instanceof ETrue) {
      return "true";
    } else if (exp instanceof EFalse) {
      return "false";
    } else if (exp instanceof EOpExp) {
      EOpExp opExp = (EOpExp) exp;
      String op = opExp.op;
      // Converter operadores específicos de Lugosi para Java
      if (op.equals("&&")) op = "&&";
      else if (op.equals("||")) op = "||";
      else if (op.equals("==")) op = "==";

      return "(" + geraCodigoExp(opExp.arg1) + " " + op + " " + geraCodigoExp(opExp.arg2) + ")";
    } else if (exp instanceof EChamadaFun) {
      EChamadaFun chamada = (EChamadaFun) exp;
      StringBuilder sb = new StringBuilder();
      sb.append(chamada.fun).append("(");
      for (int i = 0; i < chamada.args.size(); i++) {
        sb.append(geraCodigoExp(chamada.args.get(i)));
        if (i < chamada.args.size() - 1) {
          sb.append(", ");
        }
      }
      sb.append(")");
      return sb.toString();
    }
    return "";
  }

// Regras sintáticas
  static final public Prog Lugosi() throws ParseException {
 Main main = null; ArrayList<Fun> funcs = new ArrayList<Fun>(); Fun f = null;
    main = Main();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      f = Func();
                funcs.add(f);
    }
    jj_consume_token(0);
   {if (true) return new Prog(main, funcs);}
    throw new Error("Missing return statement in function");
  }

  static final public Main Main() throws ParseException {
 ArrayList<VarDecl> decls = new ArrayList<VarDecl>(); ArrayList<Comando> coms = new ArrayList<Comando>();
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(ACHAVES);
    decls = VarDecl();
    coms = SeqComandos();
    jj_consume_token(FCHAVES);
   {if (true) return new Main(decls, coms);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<VarDecl> VarDecl() throws ParseException {
 String type = null; Token var = null; ArrayList<VarDecl> result = new ArrayList<VarDecl>();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(LET);
      type = Tipo();
      var = jj_consume_token(TOKEN_id);
      jj_consume_token(PV);
                                               result.add(new VarDecl(type, var.image));
    }
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public String Tipo() throws ParseException {
 Token result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      result = jj_consume_token(FLOAT);
      break;
    case BOOL:
      result = jj_consume_token(BOOL);
      break;
    case VOID:
      result = jj_consume_token(VOID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return result.image;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Comando> SeqComandos() throws ParseException {
 Comando c = null; ArrayList<Comando> result = new ArrayList<Comando>();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINT:
      case READ:
      case TOKEN_id:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      c = Comando();
                  result.add(c);
    }
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando Comando() throws ParseException {
 Token id = null; Exp e = null; ArrayList<Comando> b = new ArrayList<Comando>(); ArrayList<Exp> args = null;
    if (jj_2_1(2)) {
      id = jj_consume_token(TOKEN_id);
      jj_consume_token(ATRIB);
      e = Exp();
      jj_consume_token(PV);
   {if (true) return new CAtribuicao(0, id.image, e);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_id:
        id = jj_consume_token(TOKEN_id);
        jj_consume_token(OPENPAREN);
        args = ListaExp();
        jj_consume_token(CLOSEPAREN);
        jj_consume_token(PV);
   {if (true) return new CChamadaFun(0, id.image, args);}
        break;
      case IF:
        jj_consume_token(IF);
        e = Exp();
        jj_consume_token(ACHAVES);
        b = SeqComandos();
        jj_consume_token(FCHAVES);
        jj_consume_token(PV);
   {if (true) return new CIf(0, e, b);}
        break;
      case WHILE:
        jj_consume_token(WHILE);
        e = Exp();
        jj_consume_token(DO);
        jj_consume_token(ACHAVES);
        b = SeqComandos();
        jj_consume_token(FCHAVES);
        jj_consume_token(PV);
   {if (true) return new CWhile(0, e, b);}
        break;
      case READ:
        jj_consume_token(READ);
        e = Exp();
        jj_consume_token(PV);
        id = jj_consume_token(TOKEN_id);
        jj_consume_token(ATRIB);
        jj_consume_token(READ);
        jj_consume_token(OPENPAREN);
        jj_consume_token(CLOSEPAREN);
        jj_consume_token(PV);
   {if (true) return new CReadInput(0, id.image);}
        break;
      case RETURN:
        jj_consume_token(RETURN);
        e = Exp();
        jj_consume_token(PV);
   {if (true) return new CReturn(0, e);}
        break;
      case PRINT:
        jj_consume_token(PRINT);
        e = Exp();
        jj_consume_token(PV);
   {if (true) return new CPrint(0, e);}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp() throws ParseException {
 Exp e1 = null; Exp e2 = null; String op = null; Exp result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENPAREN:
      jj_consume_token(OPENPAREN);
      e1 = Exp();
      op = Op();
      e2 = Exp();
      jj_consume_token(CLOSEPAREN);
   {if (true) return new EOpExp(op, e1, e2);}
      break;
    case TRUE:
    case FALSE:
    case TOKEN_id:
    case TOKEN_numliteral:
      result = Fator();
   {if (true) return result;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Fator() throws ParseException {
 Token id = null; ArrayList<Exp> args = null; Token num = null; Exp result = null;
    if (jj_2_2(2)) {
      id = jj_consume_token(TOKEN_id);
      jj_consume_token(OPENPAREN);
      args = ListaExp();
      jj_consume_token(CLOSEPAREN);
   {if (true) return new EChamadaFun(id.image, args);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOKEN_id:
        id = jj_consume_token(TOKEN_id);
   {if (true) return new EVar(id.image);}
        break;
      case TOKEN_numliteral:
        num = jj_consume_token(TOKEN_numliteral);
   {if (true) return new EFloat(Float.parseFloat(num.image));}
        break;
      case TRUE:
        jj_consume_token(TRUE);
   {if (true) return new ETrue();}
        break;
      case FALSE:
        jj_consume_token(FALSE);
   {if (true) return new EFalse();}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Op() throws ParseException {
 Token op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      op = jj_consume_token(SOMA);
      break;
    case SUB:
      op = jj_consume_token(SUB);
      break;
    case MULT:
      op = jj_consume_token(MULT);
      break;
    case DIV:
      op = jj_consume_token(DIV);
      break;
    case AND:
      op = jj_consume_token(AND);
      break;
    case OR:
      op = jj_consume_token(OR);
      break;
    case LESSER:
      op = jj_consume_token(LESSER);
      break;
    case GREATER:
      op = jj_consume_token(GREATER);
      break;
    case EQUAL:
      op = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return op.image;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Exp> ListaExp() throws ParseException {
 Exp e = null; ArrayList<Exp> result = new ArrayList<Exp>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case OPENPAREN:
    case TOKEN_id:
    case TOKEN_numliteral:
      e = Exp();
              result.add(e);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case V:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        jj_consume_token(V);
        e = Exp();
                    result.add(e);
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Fun Func() throws ParseException {
 String retorno = null; Token nome = null; ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>(); ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); ArrayList<Comando> body = new ArrayList<Comando>();
    jj_consume_token(DEF);
    retorno = Tipo();
    nome = jj_consume_token(TOKEN_id);
    jj_consume_token(OPENPAREN);
    params = ListaArg();
    jj_consume_token(CLOSEPAREN);
    jj_consume_token(ACHAVES);
    vars = VarDecl();
    body = SeqComandos();
    jj_consume_token(FCHAVES);
    {if (true) return new Fun(nome.image, params, retorno, vars, body);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<ParamFormalFun> ListaArg() throws ParseException {
 String tipo = null; Token id = null; ArrayList<ParamFormalFun> result = new ArrayList<ParamFormalFun>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
    case BOOL:
    case VOID:
      tipo = Tipo();
      id = jj_consume_token(TOKEN_id);
                                  result.add(new ParamFormalFun(id.image, tipo));
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case V:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        jj_consume_token(V);
        tipo = Tipo();
        id = jj_consume_token(TOKEN_id);
                                        result.add(new ParamFormalFun(id.image, tipo));
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(TOKEN_id)) return true;
    if (jj_scan_token(ATRIB)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(TOKEN_id)) return true;
    if (jj_scan_token(OPENPAREN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LugosiTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40,0x8180,0xf0000000,0xf0000000,0x2600,0x600,0xff80000,0x40000,0x2600,0x40000,0x8180,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x0,0x0,0x9,0x9,0x18,0x18,0x0,0x0,0x18,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Lugosi(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lugosi(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Lugosi(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Lugosi(LugosiTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LugosiTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
